<!doctype html>
<html>
<head>
<meta charset="utf-8">
<title>検証</title>

<script src="./data.js"></script>
<style>.log{font-family:monospace;}</style>
<script>
var DEBUG;
var TIMER=0;

function log(){
	var str="";
	for(var i=0; i<arguments.length; i++){
		str+=(arguments[i]);
		if(i<arguments.length-1) str+=", "
	}
	var e=document.getElementById("a").appendChild(document.createElement("div"));
	e.textContent=str;
	e.classList.add("log")
}
function 敵ID2Name(id){
	for(var i in 敵ID対応表){
		if(id==敵ID対応表[i]) return i;
		if(id==1537 || id==1538) return 1536;
		if(id==1550 || id==1551) return 1549;
		if(id==1601) return 1599;
		if(1609<id && id<=1612) return 1609;
	}
	return "";
}
function 敵Name2ID(name){
	return (敵ID対応表[name]?敵ID対応表[name]:0);
}





function ken(){
	log("■■■■■■■■■検証開始■■■■■■■■■■");
	do_test(undef_enemy, "未定義敵データ混入検知……");
	do_test(difference_to_wikia_call, "敵編成差分……");
}




function difference_to_wikia_call(){
	var xhrList=[];
	var wikia_方面list=["1","2","3","7","4","5","6"];
	var 方面list=["鎮守府海域","南西諸島海域","北方海域","南西海域","西方海域","南方海域","中部海域"];
	var 海域を数字に直すためのobj={
		"鎮守府海域":{
			"鎮守府正面海域":"1-1",
			"南西諸島沖":"1-2",
			"製油所地帯沿岸":"1-3",
			"南西諸島防衛戦":"1-4",
			"鎮守府近海":"1-5",
			"鎮守府近海航路":"1-6",
		},
		"南西諸島海域":{
			"南西諸島近海":"2-1",
			"バシー海峡":"2-2",
			"東部オリョール海":"2-3",
			"沖ノ島海域":"2-4",
			"沖ノ島沖":"2-5",
		},
		"北方海域":{
			"モーレイ海":"3-1",
			"キス島沖":"3-2",
			"アルフォンシーノ方面":"3-3",
			"北方海域全域":"3-4",
			"北方AL海域":"3-5",
		},
		"南西海域":{
			"ブルネイ泊地沖":"7-1",
		},
		"西方海域":{
			"ジャム島沖":"4-1",
			"カレー洋海域":"4-2",
			"リランカ島":"4-3",
			"カスガダマ島":"4-4",
			"カレー洋リランカ島沖":"4-5",
		},
		"南方海域":{
			"南方海域前面":"5-1",
			"珊瑚諸島沖":"5-2",
			"サブ島沖海域":"5-3",
			"サーモン海域":"5-4",
			"サーモン海域北方":"5-5",
		},
		"中部海域":{
			"中部海域哨戒線":"6-1",
			"MS諸島沖":"6-2",
			"グアノ環礁沖海域":"6-3",
			"中部北海域ピーコック島沖":"6-4",
			"KW環礁沖海域":"6-5",
		},
	}
	
//	海域を数字に直すためのobj={"南方海域":{"サーモン海域北方":"5-5"}}; //テスト中は1海域に
//	海域を数字に直すためのobj={"鎮守府海域":{"南西諸島防衛戦":"1-4"}};
	
	var temp=0;
	for(var 方面 in 海域を数字に直すためのobj){
		for(var 海域 in 海域を数字に直すためのobj[方面]){
			var 海域名称=海域を数字に直すためのobj[方面][海域];
			var 方面名称=海域名称.replace(/(\d)-\d/,"$1");
			
			var url=`https://kancolle.wikia.com/wiki/World_${方面名称}/${海域名称}`;
			
			xhrList[temp]=new XMLHttpRequest();
			xhrList[temp].open("GET",url,true);
			xhrList[temp].responseType="document";
			xhrList[temp].onreadystatechange=(function(方面,海域,xhr,海域名称){return function(){
				if(xhr.readyState==4){
					log("■"+海域名称)
					var d=xhr.responseXML;
					difference_to_wikia(d,方面,海域);
				}
			}})(方面,海域,xhrList[temp],海域名称);
			setTimeout((function(xhr){return function(){xhr.send(null);}})(xhrList[temp]),TIMER);
			TIMER+=500
		}
	}
}
function difference_to_wikia(D,方面,海域){
	var 海域データ_wikia={};
	var scrollableDivList, scrollableDiv;
	
	// 「マップのマスと敵編成一覧」情報を取り出す
	scrollableDivList=D.querySelectorAll("div.scrollable");
	if(scrollableDivList.length==0){
		//5-5のように、フォーマットから外れるマップに対する個別的な対処
		var divList=D.querySelectorAll("div");
		var div_ok=false;
		for(var i=0; i<divList.length; i++){
			var divElem=divList[i];
			if(!divElem.hasAttribute("style")) continue;
			var style=divElem.style;
			if(style.maxHeight && style.overflowY=="auto" && style.overflowX=="hidden"){
				scrollableDiv=divElem;
				div_ok=true;
				break;
			}
		}
		if(!div_ok){
			log(`敵編成取得に失敗`);
			return;
		}
	}else if(scrollableDivList.length>1){
		scrollableDiv=scrollableDivList[0]; //とりあえず甲固定
	}else{
		scrollableDiv=scrollableDivList[0];
	}
	
	// 「マップのマスと敵編成一覧」をパースして順次代入する
	var pointTableList = scrollableDiv.querySelectorAll("table");
	for(var i=0; i<pointTableList.length; i++){
		var pointTable=pointTableList[i];
		
		//戦闘しないテーブルは無視する
		var thText=pointTable.querySelector("th").textContent;
		if(thText.indexOf("Empty Node")>=0) continue;
		
		// テーブルの中でtdを持つtr一覧を取得し、マス名と敵編成を読み取る
		var trList=pointTable.querySelectorAll("tr");
		var pointName="";
		var firstFlg=true;
		for(var j=0; j<trList.length; j++){
			var trElem=trList[j];
			// tdを持たないtrは無視する
			var tdList=trElem.querySelectorAll("td");
			if(tdList.length==0) continue;
			
			// 最初のtrは、tdとしてマス名を含むので取得する
			if(firstFlg){
				pointName=tdList[0].textContent.replace("\n","");
				海域データ_wikia[pointName]=[];
				firstFlg=false;
			}
			
			
			// 敵編成が記録されているtdの位置を判断する
			var tempIndex=-1;
			for(var k=0; k<tdList.length; k++){
				if(tdList[k].querySelectorAll("a.link-internal").length>0){
					tempIndex=k;
					break;
				}
			}
			if(tempIndex==-1) continue; //敵編成が記録されていなければ次の行へ
			
			// 余計なタグを削除する
			var spanList=tdList[tempIndex].querySelectorAll("span>span");
			for(var k=spanList.length-1; k>=0; k--){
				spanList[k].parentNode.removeChild(spanList[k]);
			}
			
			// 敵編成を読み取る
			var aList=tdList[tempIndex].querySelectorAll("a.link-internal");
			var enemyList=[];
			var fleet=[];
			for(var k=0; k<aList.length; k++){
				var title=aList[k].title;
				var enemyId=parseInt( title.replace(/.*\((\d+)\):.*/,"$1") ); //"Submarine Yo-Class Elite(1533): 27 Armor, 34 HP"　→　"1533"
				enemyList.push(enemyId);
			}
			海域データ_wikia[pointName].push(enemyList);
		}
	}
	DEBUG=海域データ_wikia;
	
	
	//海域データ_wikiaが完成したので比較する
	var 海域データ_tool=海域データ[方面].データ[海域];
	var 海域データ_tool_idhash={}
	var 海域データ_wikia_idhash={};
	var sorted_t={};
	var sorted_w={};
	for(var i in 海域データ_tool){
		海域データ_tool_idhash[i]=[];
		for(var j=0; j<海域データ_tool[i].length; j++){
			海域データ_tool_idhash[i][j]=0;
			for(var k=0; k<海域データ_tool[i][j].length; k++){
				海域データ_tool_idhash[i][j]+=敵Name2ID(海域データ_tool[i][j][k]);
			}
		}
	}
	for(var i in 海域データ_tool_idhash){
		if(海域データ_tool_idhash[i].length==0) continue;
		sorted_t[i]=Array.from(new Set(海域データ_tool_idhash[i])).sort();
	}
	for(var i in 海域データ_wikia){
		海域データ_wikia_idhash[i]=[];
		for(var j=0; j<海域データ_wikia[i].length; j++){
			海域データ_wikia_idhash[i][j]=0;
			for(var k=0; k<海域データ_wikia[i][j].length; k++){
				海域データ_wikia_idhash[i][j]+=敵Name2ID(敵ID2Name(海域データ_wikia[i][j][k])); //ID→名前→IDと変換することで余分な敵艦IDを0に
			}
		}
	}
	for(var i in 海域データ_wikia_idhash){
		if(海域データ_wikia_idhash[i].length==0) continue;
		sorted_w[i]=Array.from(new Set(海域データ_wikia_idhash[i])).sort();
		for(var j=sorted_w[i].length-1; j>=0; j--){
			if(sorted_w[i][j]==0) sorted_w[i].splice(j,1);
		}
		if(sorted_w[i].length==0) delete sorted_w[i];
	}
	
	for(var i in sorted_t){
		if(""+sorted_t[i]==""+sorted_w[i]) continue;
		log(`${i}マス……`);
		log(`wikia:　${""+sorted_w[i]}`);
		log(`ｶｯｺｶﾘ:　${""+sorted_t[i]}`);
	}
/*	for(var i in sorted_w){
		if(""+sorted_t[i]==""+sorted_w[i]) continue;
		log(`${i}マス……`);
		log(`wikia:　${""+sorted_w[i]}`);
		log(`ｶｯｺｶﾘ:　${""+sorted_t[i]}`);
	}*/
DEBUG1=sorted_w;
DEBUG2=sorted_t;
}

function undef_enemy(){
	for(var 方面 in 海域データ){
		for(var 作戦 in 海域データ[方面]["データ"]){
			for(var マス in 海域データ[方面]["データ"][作戦]){
				for(var 編成 in 海域データ[方面]["データ"][作戦][マス]){
					for(var 敵 in 海域データ[方面]["データ"][作戦][マス][編成]){
						if(undefined==深海棲艦データ[海域データ[方面]["データ"][作戦][マス][編成][敵]]){
							log(方面,作戦,マス,編成,敵,海域データ[方面]["データ"][作戦][マス][編成][敵]);
						}
					}
				}
			}
		}
	}
}
function do_test(func,str1,str2){
if(!func) return;
	log(str1);
	func();
	log("完了！");
	log("- - - - - - - - - - - - - - - - - - - - - - ");
}

















var 敵ID対応表={
	"ヌ":1510,
	"ヌe":1523,
	"ヌe(白猫)":1762,
	"ヌe(1776)":1776,
	"ヌe(黒猫)":1777,
	"ヌ改e(鷹)":1734,
	"ヌ改e(鷹+白猫)":1765,
	"ヌ改e(黒猫)":1778,
	"ヌf":1560,
	"ヌf(白猫)":1763,
	"ヌf(赤猫)":1764,
	"ヌ改f(鷹)":1735,
	"ヌ改f(鷹+赤猫)":1766,
	"ヌ改f(赤猫)":1779,
	"ヌ改f(黒猫)":1780,
	
	"ヲ":1512,
	"ヲe":1525,
	"ヲf":1528,
	"ヲf(白猫)":1579,
	"ヲf(赤猫+白猫)":1614,
	"ヲf(赤猫)":1615,
	"ヲ改f":1565,
	"ヲ改f(赤猫)":1618,
	"ヲ改f(赤猫+白猫)":1617,
	"ヲ改f(白猫)":1616,
	"ヲ改f(陸爆下)":1714,
	"ヲ改f(陸爆上)":1715,
	
	
	"装甲空母鬼":1544,
	"装甲空母姫":1545,
	"浮遊要塞":1536,		//1536,1537,1538を1536として扱う
	"護衛要塞":1549,
	"泊地棲鬼":1539,
	"泊地棲姫":1540,
	"南方棲鬼":1546,
	"南方棲戦鬼":1547,
	"南方棲戦姫":1548,
	"飛行場姫":1556,
	"飛行場姫(強)":1633,
	"飛行場姫(強B)":1632,
	"飛行場姫(強C)":1631,
	"飛行場姫(陸爆)":1652,
	"飛行場姫(陸爆弱B)":1651,
	"飛行場姫(陸爆弱C)":1650,
	"集積地棲姫":1655,
	"集積地棲姫(弱B)":1654,
	"集積地棲姫(弱C)":1653,
	"集積地棲姫-壊":1658,
	"集積地棲姫-壊(弱B)":1657,
	"集積地棲姫-壊(弱C)":1656,
	"空母水鬼":1599,
	
	"戦艦レ級":1561,
	"戦艦レ級elite":1562,
	"港湾棲姫":1573,
	"港湾棲姫(強)":1613,
	"離島棲鬼":1574,
	"離島棲鬼(強)":1636,
	"離島棲鬼(強B)":1635,
	"離島棲鬼(強C)":1634,
	"離島棲姫(空母A)":1668,
	"離島棲姫(空母C)":1669,
	"離島棲姫(航戦)":1671,
	"離島棲姫(戦艦)":1672,
	
	"北方棲姫":1581,
	"北方棲姫(本気)":1582,
	"北方棲姫(3-5)":1587,
	"北方棲姫(3-5本気)":1588,
	"北方棲姫(3-5弱)":1589,
	"北方棲姫(3-5弱本気)":1590,
	"中間棲姫":1583,
	"中間棲姫(強)":1584,
	
	"空母棲鬼":1585,
	"空母棲鬼(強)":1619,
	"空母棲姫":1586,
	"空母棲姫(赤猫)":1620,
	"空母棲姫(黒猫)":1781,
	"空母棲姫(黒猫B)":1782,
	
	
	"港湾水鬼":1607,
	"港湾水鬼(本気)":1608,
	"港湾水鬼(弱)":1605,
	"港湾水鬼(弱本気)":1606,
	"泊地水鬼":1609,
	"水母棲姫":1627,
	"水母棲姫(弱B)":1626,
	"水母棲姫(弱C)":1625,
	"水母水姫":1710,
	"水母水姫(弱B)":1709,
	"水母水姫(弱C)":1708,
	"深海海月姫":1713,
	"深海海月姫(弱B)":1712,
	"深海海月姫(弱C)":1711,
	
	"リコリス棲姫(陸爆弱)":1680,
	"リコリス棲姫(陸爆強)":1683,
	"リコリス棲姫(A)":1681,
	"リコリス棲姫(B)":1682,
	"リコリス棲姫(C)":1679,
	
	"港湾夏姫":1701,
	"港湾夏姫(弱B)":1700,
	"港湾夏姫(弱C)":1699,
	"港湾夏姫-壊":1704,
	"港湾夏姫-壊(弱B)":1703,
	"港湾夏姫-壊(弱C)":1702,
	
	"深海双子棲姫":1718,
	"深海双子棲姫(弱B)":1717,
	"深海双子棲姫(弱C)":1716,
	"深海双子棲姫-壊":1721,
	"深海双子棲姫-壊(弱B)":1720,
	"深海双子棲姫-壊(弱C)":1719,
	
	"護衛棲姫":1724,
	"護衛棲姫(弱B)":1723,
	"護衛棲姫(弱C)":1722,
	"北端上陸姫":1727,
	"北端上陸姫(弱B)":1726,
	"北端上陸姫(弱C)":1725,
	"北方水姫":1730,
	"北方水姫(弱B)":1729,
	"北方水姫(弱C)":1728,
	"北方水姫-壊":1733,
	"北方水姫-壊(弱B)":1732,
	"北方水姫-壊(弱C)":1731,
	
	"重巡ネ級flagship":1761,
	
	"空母夏鬼":1751,
	"空母夏姫":1752,
	"集積地夏姫":1754,
	"集積地夏姫(弱)":1753,
	"戦艦仏棲姫":1747,
	"戦艦仏棲姫(弱C)":1746,
	"戦艦仏棲姫(弱B)":1745,
	"戦艦仏棲姫-壊":1750,
	"戦艦仏棲姫-壊(弱B)":1749,
	"戦艦仏棲姫-壊(弱C)":1748,
	"欧州棲姫":1757,
	"欧州棲姫(弱B)":1756,
	"欧州棲姫(弱C)":1755,
	"欧州棲姫-壊":1760,
	"欧州棲姫-壊(弱B)":1759,
	"欧州棲姫-壊(弱C)":1758,
	
	"海峡夜棲姫":1769,
	"海峡夜棲姫(弱B)":1768,
	"海峡夜棲姫(弱C)":1767,
	"海峡夜棲姫-壊":1772,
	"海峡夜棲姫-壊(弱B)":1771,
	"海峡夜棲姫-壊(弱C)":1770,
	
	"護衛棲水姫(A)":1785,
	"護衛棲水姫-壊(A)":1788,
	
	"深海鶴棲姫":1801,
	"深海鶴棲姫-壊":1804,
	
	"集積地棲姫 バカンスmode":1811,
	"集積地棲姫 バカンスmode(弱B)":1810,
	"集積地棲姫 バカンスmode(弱C)":1809,
	"泊地水鬼 バカンスmode":1817,
	"泊地水鬼 バカンスmode(弱B)":1816,
	"泊地水鬼 バカンスmode(弱C)":1815,
	"護衛独還姫":1823,
	"護衛独還姫(弱B)":1822,
	"護衛独還姫(弱C)":1821,
	"護衛独還姫-壊":1826,
	"護衛独還姫-壊(弱B)":1825,
	"護衛独還姫-壊(弱C)":1824,
	"欧州水姫":1842,
	"欧州水姫(弱B)":1841,
	"欧州水姫(弱C)":1840,
	"欧州水姫-壊":1845,
	"欧州水姫-壊(弱B)":1844,
	"欧州水姫-壊(弱C)":1843,
	"戦艦仏棲姫 バカンスmode":1836,
	"戦艦仏棲姫 バカンスmode(弱B)":1835,
	"戦艦仏棲姫 バカンスmode(弱C)":1834,
	"戦艦仏棲姫 バカンスmode-壊":1839,
	"戦艦仏棲姫 バカンスmode-壊(弱B)":1838,
	"戦艦仏棲姫 バカンスmode-壊(弱C)":1837,
}
</script>

</head>
<body>
<button onclick="ken()">検証</button>
<p id="a"></p>

</body>
</html>